/*****************************************************************************************************************
*    AUTHOR: Tomer Dery                                                                                 
*    DATE: 06.02.14                                                                                              
*    LAST MODIFIED: 09.02.14                                                                                  
*    DESCRIPTION: Message Queue + sem
*****************************************************************************************************************/
#define _BSD_SOURCE 
#define _POSIX_C_SOURCE 2
#define _XOPEN_SOURCE 500
/*-----------------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <signal.h>
#include <sys/wait.h>
#include <limits.h>
#include <sys/types.h> 
#include <sys/stat.h>
#include <fcntl.h>
#include <getopt.h>
#include <sys/msg.h>
#include <sys/sem.h>

#include "msgQueueSem.h"

/*-----------------------------------------------------------------*/

typedef struct Args{
	int m_verbose;
	char m_file[MAX_FILE_NAME];
	int m_workTime;
}Args;

/*-----------------------------------------------------------------*/

void GetArgs(int argc ,char** argv, Args* args);

int ReadFromMsgQ(int _msqid , int _semId);

int RegPong(int _msqid);

int UnRegPong(int _semId, int _msqid);

/*-----------------------------------------------------------------*/

Args args = {DEFAULT_IS_VERBOSE, "", DEFAULT_WRK_TIME} ;

/*-----------------------------------------------------------------*/

int main(int argc,char** argv)
{	
    int msqid , semId ,err;

	GetArgs(argc ,argv, &args);
	
	PRINT_D_V("Consumer PID is %d\n",  getpid() );
	
	/*init queue*/
	err =  InitMsgQueue(&msqid , args.m_file ,NO_FLAGS );
	CHKERR(err);
	
	/*init sem*/
	err =  InitSem(&semId, args.m_file ,NO_FLAGS);
	CHKERR(err);
    
	/*register pong*/
	err = RegPong(semId);
	CHKERR(err);

    /*read from queue*/
    err = ReadFromMsgQ(msqid , semId);
    CHKERR(err);
    
    /*unregister pong -> => if not last send EOF*/
    UnRegPong(semId, msqid);
				
	PRINT_V("PONG ENDED\n");
	
	return 0;
}

/*-----------------------------------------------------------------*/
int RegPong(int _semId)
{	
	PRINT_V("PONG register\n"); 

	return SemOp(_semId, PONG_SEM, UP , NO_FLAGS);
}

/*-----------------------------------------------------------------*/

int UnRegPong(int _semId, int _msqid)
{	
	int numOfPongs ,err;

	PRINT_V("PONG unregister\n"); 
	
	err = SemOp(_semId, PONG_SEM, DOWN , NO_FLAGS);
	CHKERR(err);
	
	err = CountOfSem(_semId , PONG_SEM ,&numOfPongs);
	CHKERR(err);
	
	/*if there are more pongs on system => send EOF*/
	if(numOfPongs > 0){
		PRINT_V("SEND EOF TO NEXT PONG!!!\n");
		SendEOF(_msqid);
	}else{
		PRINT_V("LAST PONG ON SYSTEM!!!\n");
	}

	return OK;
}
/*-----------------------------------------------------------------*/

int ReadFromMsgQ(int _msqid, int _semId)
{
	Buf bufRead , bufAck;
	int err, numOfMsgRcv = 0 , numOfBytesRcv = 0 ;
	
	bufRead.mtype = 0;
	
	bufAck.mtype = ACK_TYPE;
	strcpy(bufAck.mtext, ACK_SIGN);
	
	PRINT_V("start reading...\n");
		
	/*wait for first ping - atomic down and up to ping sem*/
	err = DownUpSemPing(_semId, PING_SEM, NO_FLAGS);
	CHKERR(err);

	while(TRUE)
	{
		/*reading*/
		if ( (numOfBytesRcv = (msgrcv(_msqid, &bufRead, sizeof(bufRead.mtext), SND_TYPE , NO_FLAGS))) == -1) {
			perror("msgrcv");
			return ERR_MSGRCV;
        }
        
        /*check if EOF  */		 
		if(strcmp(bufRead.mtext , EOF_SIGN) == 0){
	    	 PRINT_V("EOF received\n");
	    	 break;
	    }	
        
        ++numOfMsgRcv;
        bufRead.mtext[numOfBytesRcv] = '\0';  /*add null for printing msg*/
        PRINT_S_V("reading: %s\n", bufRead.mtext);
        
        /*work*/
        usleep(args.m_workTime);  
        
        /*send ack*/
        PRINT_V("sending ack\n");
        if (msgsnd(_msqid, &bufAck, strlen(bufAck.mtext) , NO_FLAGS) == -1){
            perror("msgsnd");
            return ERR_MSGSND;
        }           
    }

	PRINT_V("finished reading\n");
	PRINT_D_V("%d messages were received\n", numOfMsgRcv);	

	return OK;
}

/*-----------------------------------------------------------------*/

void GetArgs(int _argc ,char** _argv, Args* _args)
{
	int argType;

	/*set args from agrv*/	
	while ((argType = getopt(_argc, _argv, "vf:s:")) != -1)
	{
		switch(argType)
		{
			case 'v':
				_args->m_verbose = TRUE;
				break;	
			case 'f':
				strcpy(_args->m_file , optarg);
				break;	
			case 's':
				_args->m_workTime = atoi(optarg) * MICROSEC_MUL_RES;
				break;				
			default:				
				break;
		}
	}
	
	/*if wasnt set -> set default values*/
	if( strcmp (_args->m_file, "") == 0){
		strcpy(_args->m_file , DEFAULT_FILE);
	}
	
}

/*-----------------------------------------------------------------*/
